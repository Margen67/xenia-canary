//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint xe_resolve_edram_info;        // Offset:    0 Size:     4
//   uint xe_resolve_address_info;      // Offset:    4 Size:     4
//   uint xe_resolve_dest_info;         // Offset:    8 Size:     4
//   uint xe_resolve_dest_pitch;        // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_source                 texture   uint2         buf      T0             t0      1 
// xe_resolve_dest                       UAV   uint2         buf      U0             u0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][1], immediateIndexed, space=0
dcl_resource_buffer (uint,uint,uint,uint) T0[0:0], space=0
dcl_uav_typed_buffer (uint,uint,uint,uint) U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 12
dcl_thread_group 8, 8, 1
ishl r0.xw, vThreadID.xxxx, l(1, 0, 0, 1)
ushr r1.x, CB0[0][0].y, l(7)
bfi r1.x, l(11), l(3), r1.x, l(0)
uge r1.x, r0.w, r1.x
if_nz r1.x
  ret 
endif 
ushr r1.xy, CB0[0][0].yyyy, l(5, 29, 0, 0)
mov r1.z, CB0[0][0].y
bfi r2.xy, l(5, 2, 0, 0), l(3, 3, 0, 0), r1.zxzz, l(0, 0, 0, 0)
mov r0.yz, vThreadID.yyyy
iadd r2.xy, r0.wzww, r2.xyxx
and r3.xyzw, CB0[0][0].xxwz, l(1023, 0x40000000, 0x00003fff, 7)
ubfe r4.xyzw, l(12, 2, 6, 4), l(13, 10, 7, 25), CB0[0][0].xxzx
uge r1.w, l(3), r1.y
if_nz r1.w
  mov r5.y, r1.y
else 
  ieq r1.w, r1.y, l(5)
  if_nz r1.w
    mov r5.y, l(2)
  else 
    mov r5.y, l(0)
  endif 
endif 
uge r2.zw, r4.yyyy, l(0, 0, 2, 1)
and r5.zw, r2.zzzw, l(0, 0, 1, 1)
ishl r2.xy, r2.xyxx, r5.zwzz
ushr r5.x, r5.y, l(1)
and r5.xy, r5.xyxx, l(1, 1, 0, 0)
iadd r2.xy, r2.xyxx, r5.xyxx
udiv r5.xy, null, r2.xyxx, l(80, 16, 0, 0)
ishl r1.w, r5.x, l(1)
imad r1.w, r5.y, r3.x, r1.w
iadd r1.w, r1.w, r4.x
imad r2.xy, -r5.xyxx, l(80, 16, 0, 0), r2.xyxx
imad r2.x, r2.y, l(80), r2.x
ishl r2.x, r2.x, l(1)
imad r1.w, r1.w, l(1280), r2.x
imul null, r1.w, r1.w, l(9)
ushr r1.w, r1.w, l(1)
movc r2.xy, r0.wzww, l(0,0,0,0), l(1,1,0,0)
movc r2.xy, r3.yyyy, r2.xyxx, l(0,0,0,0)
bfi r5.xyzw, l(2, 2, 2, 2), l(3, 3, 3, 3), r1.zxxz, l(0, 0, 0, 0)
iadd r0.xyzw, r0.xyzw, r5.xyzw
and r1.xz, CB0[0][0].zzzz, l(8, 0, 0x01000000, 0)
if_nz r1.x
  ubfe r3.xy, l(3, 14, 0, 0), l(4, 16, 0, 0), CB0[0][0].zwzz
  iadd r4.xy, r3.yzyy, l(31, 31, 0, 0)
  ishr r5.xyzw, r0.zwzw, l(4, 5, 3, 3)
  ishr r1.x, r3.x, l(2)
  ushr r4.xy, r4.xyxx, l(4, 5, 0, 0)
  and r2.w, r4.x, l(2046)
  imad r2.w, r1.x, r2.w, r5.x
  imad r2.w, r2.w, r4.y, r5.y
  ishl r3.y, r0.z, l(10)
  and r3.y, r3.y, l(6144)
  bfi r3.y, l(3), l(8), r0.w, r3.y
  ishr r3.y, r3.y, l(6)
  iadd r1.x, r1.x, r5.z
  bfi r4.x, l(1), l(1), r1.x, l(0)
  iadd r4.x, r4.x, r5.w
  bfi r4.x, l(2), l(1), r4.x, l(0)
  bfi r1.x, l(1), l(0), r1.x, r4.x
  and r4.x, r3.y, l(112)
  bfi r5.xy, l(20, 20, 0, 0), l(10, 13, 0, 0), r2.wwww, l(0, 0, 0, 0)
  imad r4.xy, r4.xxxx, l(2, 16, 0, 0), r5.xyxx
  bfi r4.xy, l(4, 4, 0, 0), l(0, 3, 0, 0), r3.yyyy, r4.xyxx
  bfi r3.xy, l(2, 2, 0, 0), l(8, 11, 0, 0), r3.xxxx, r4.xyxx
  ubfe r2.w, l(3), l(6), r3.x
  and r4.x, r1.x, l(6)
  bfi r1.x, l(1), l(8), r1.x, l(0)
  imad r1.x, r2.w, l(32), r1.x
  imad r1.x, r4.x, l(4), r1.x
  bfi r3.xy, l(1, 1, 0, 0), l(4, 7, 0, 0), r0.zzzz, r3.xyxx
  bfi r1.x, l(9), l(3), r1.x, r3.y
  bfi r1.x, l(6), l(0), r3.x, r1.x
else 
  ishr r5.xyzw, r0.xyzw, l(5, 5, 2, 3)
  iadd r0.x, r3.z, l(31)
  ushr r0.x, r0.x, l(5)
  imad r0.x, r5.y, r0.x, r5.x
  ishl r3.xy, r0.zzzz, l(4, 7, 0, 0)
  and r3.xy, r3.xyxx, l(224, 2048, 0, 0)
  bfi r0.y, l(3), l(2), r0.w, r3.x
  ishl r2.w, r3.x, l(1)
  bfi r0.w, l(3), l(3), r0.w, r2.w
  and r0.w, r0.w, l(480)
  bfi r2.w, l(23), l(9), r0.x, r0.w
  bfi r2.w, l(4), l(0), r0.y, r2.w
  bfi r2.w, l(1), l(4), r0.z, r2.w
  ishl r3.xz, r0.wwww, l(3, 0, 2, 0)
  bfi r0.xw, l(23, 0, 0, 23), l(12, 0, 0, 11), r0.xxxx, r3.xxxz
  bfi r0.xy, l(4, 4, 0, 0), l(3, 2, 0, 0), r0.yyyy, r0.xwxx
  bfi r0.xy, l(1, 1, 0, 0), l(7, 6, 0, 0), r0.zzzz, r0.xyxx
  bfi r0.x, l(12), l(0), r3.y, r0.x
  and r0.y, r0.y, l(1792)
  iadd r0.x, r0.x, r0.y
  and r0.y, r5.z, l(2)
  iadd r0.y, r5.w, r0.y
  bfi r0.y, l(2), l(6), r0.y, l(0)
  iadd r0.x, r0.x, r0.y
  bfi r1.x, l(6), l(0), r2.w, r0.x
endif 
imul null, r0.x, r1.x, l(9)
ushr r0.x, r0.x, l(3)
imad r0.y, r2.y, l(3), r1.w
iadd r0.z, r2.x, r0.y
ld r5.yw, r0.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r3.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
ibfe r0.w, l(6), l(16), CB0[0][0].z
ishl r0.w, r0.w, l(23)
iadd r0.w, r0.w, l(0x3f800000)
uge r1.x, r1.y, l(4)
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r0.z, l(720)
  ld r6.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r3.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xy, r0.zzzz, l(9, 729, 0, 0)
    ld r6.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r6.yywy, l(16, 0, 16, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r3.zzzx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
iadd r3.xy, r0.yyyy, l(1, 2, 0, 0)
ld r6.yw, r3.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xz, r6.yywy, l(16, 0, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.zzzx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(721)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.zzzx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r3.xz, r0.yyyy, l(10, 0, 730, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r6.xyzw, r0.zzzz, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.z, r7.y, l(256), r7.x
  imad r0.z, r7.z, l(0x00010000), r0.z
  imad r4.x, r7.w, l(0x01000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.z, r7.y, l(256), r7.x
  imad r0.z, r7.z, l(0x00010000), r0.z
  imad r4.y, r7.w, l(0x01000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.z, r7.y, l(1024), r7.x
  imad r0.z, r7.z, l(0x00100000), r0.z
  imad r4.x, r7.w, l(0x40000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.z, r7.y, l(1024), r7.x
  imad r0.z, r7.z, l(0x00100000), r0.z
  imad r4.y, r7.w, l(0x40000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r0.z, r7.y, l(2048), r7.x
  imad r4.x, r7.z, l(0x00400000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r0.z, r7.y, l(2048), r7.x
  imad r4.y, r7.z, l(0x00400000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r0.z, r7.y, l(1024), r7.x
  imad r4.x, r7.z, l(0x00200000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r0.z, r7.y, l(1024), r7.x
  imad r4.y, r7.z, l(0x00200000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r3.xz, r5.xxyx, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r3.xz, r3.xxzx
  imad r6.z, r3.z, l(0x00010000), r3.x
  mov_sat r6.xy, r6.xyxx
  mad r3.xz, r6.xxyx, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r3.xz, r3.xxzx
  imad r6.x, r3.z, l(0x00010000), r3.x
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r6.x
  f32tof16 r7.x, r5.y
  f32tof16 r7.y, r6.y
  imad r6.xz, r7.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r6.z, r5.x
  break 
endswitch 
ieq r3.xzw, r3.wwww, l(1, 0, 2, 3)
or r3.xz, r3.zzwz, r3.xxzx
if_nz r3.x
  ishl r4.xy, r6.zxzz, l(8, 8, 0, 0)
  and r4.xy, r4.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r5.xy, r6.zxzz, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r6.xz, r4.yyxy, r5.yyxy
endif 
if_nz r3.z
  ushr r4.xy, r6.zxzz, l(16, 16, 0, 0)
  bfi r6.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r6.xxzx, r4.yyxy
endif 
store_uav_typed U0[0].xyzw, r0.xxxx, r6.zxzz
ld r5.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.yw, r5.yyyw, l(0, 16, 0, 16)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r3.wwwy
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(722)
  ld r6.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r6.yyyw, l(0, 16, 0, 16)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r3.wwwy
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r3.yw, r0.yyyy, l(0, 11, 0, 731)
    ld r6.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r4.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r7.yyyw, l(0, 16, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.wwwy
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r5.xyzw, r0.zzzz, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
iadd r0.y, r1.w, r2.x
iadd r3.yw, r0.yyyy, l(0, 3, 0, 6)
ld r6.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r4.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(723)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r4.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r4.xy, r0.yyyy, l(12, 732, 0, 0)
    ld r7.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r8.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r4.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r6.xyzw, r0.zzzz, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
iadd r7.xyzw, r0.xxxx, l(1, 2, 3, 4)
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.x, r8.w, l(0x01000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.y, r8.w, l(0x01000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.x, r8.w, l(0x40000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.y, r8.w, l(0x40000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(2048), r8.x
  imad r4.x, r8.z, l(0x00400000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r8.xyz, r6.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(2048), r8.x
  imad r4.y, r8.z, l(0x00400000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(1024), r8.x
  imad r4.x, r8.z, l(0x00200000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r8.xyz, r6.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(1024), r8.x
  imad r4.y, r8.z, l(0x00200000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r4.xy, r5.xyxx, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r6.z, r4.y, l(0x00010000), r4.x
  mov_sat r6.xy, r6.xyxx
  mad r4.xy, r6.xyxx, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r6.x, r4.y, l(0x00010000), r4.x
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r6.x
  f32tof16 r8.x, r5.y
  f32tof16 r8.y, r6.y
  imad r6.xz, r8.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r6.z, r5.x
  break 
endswitch 
if_nz r3.x
  ishl r4.xy, r6.zxzz, l(8, 8, 0, 0)
  and r4.xy, r4.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r5.xy, r6.zxzz, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r6.xz, r4.yyxy, r5.yyxy
endif 
if_nz r3.z
  ushr r4.xy, r6.zxzz, l(16, 16, 0, 0)
  bfi r6.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r6.xxzx, r4.yyxy
endif 
store_uav_typed U0[0].xyzw, r7.xxxx, r6.zxzz
iadd r5.xyzw, r1.wwww, l(4, 5, 7, 8)
ld r6.yw, r5.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r4.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r1.w, l(724)
  ld r8.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r4.yyyx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r8.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(13, 733, 0, 0)
    ld r8.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r9.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r9.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r6.ywxz, r8.ywxz
    ld r9.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r4.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r6.xyzw, r0.zzzz, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
ld r8.yw, r5.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
  ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
  itof r9.xyzw, r9.xyzw
  mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
  f16tof32 r8.xy, r8.wyww
  f16tof32 r8.zw, r4.yyyx
  break 
  default 
  mov r8.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r1.w, l(725)
  ld r9.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
    ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
    itof r10.xyzw, r10.xyzw
    mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r9.ywyy, l(16, 16, 0, 0)
    f16tof32 r9.xy, r9.wyww
    f16tof32 r9.zw, r4.yyyx
    break 
    default 
    mov r9.xz, l(0,0,0,0)
    break 
  endswitch 
  add r8.xyzw, r8.xyzw, r9.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(14, 734, 0, 0)
    ld r9.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r5.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r9.xyzw, r8.ywxz, r9.ywxz
    ld r10.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r10.xz, r10.yywy, l(16, 0, 16, 0)
      ishr r11.xyzw, r10.xyzw, l(16, 16, 16, 16)
      itof r11.xyzw, r11.xyzw
      mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r10.xyzw, r11.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r10.ywyy, l(16, 16, 0, 0)
      f16tof32 r10.xy, r10.wyww
      f16tof32 r10.zw, r4.yyyx
      break 
      default 
      mov r10.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r9.zxwy, r10.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r8.xyzw, r0.zzzz, r8.ywxz
if_nz r1.z
  mov r8.xz, r8.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r6.xyzw, r6.xyzw
  mad r9.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.z, r9.y, l(256), r9.x
  imad r0.z, r9.z, l(0x00010000), r0.z
  imad r4.x, r9.w, l(0x01000000), r0.z
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.z, r9.y, l(256), r9.x
  imad r0.z, r9.z, l(0x00010000), r0.z
  imad r4.y, r9.w, l(0x01000000), r0.z
  mov r8.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r6.xyzw, r6.xyzw
  mad r9.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.z, r9.y, l(1024), r9.x
  imad r0.z, r9.z, l(0x00100000), r0.z
  imad r4.x, r9.w, l(0x40000000), r0.z
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.z, r9.y, l(1024), r9.x
  imad r0.z, r9.z, l(0x00100000), r0.z
  imad r4.y, r9.w, l(0x40000000), r0.z
  mov r8.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r6.xyz, r6.xyzx
  mad r9.xyz, r6.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r9.xyz, r9.xyzx
  imad r0.z, r9.y, l(2048), r9.x
  imad r4.x, r9.z, l(0x00400000), r0.z
  mov_sat r8.xyz, r8.xyzx
  mad r9.xyz, r8.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r9.xyz, r9.xyzx
  imad r0.z, r9.y, l(2048), r9.x
  imad r4.y, r9.z, l(0x00400000), r0.z
  mov r8.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r6.xyz, r6.xyzx
  mad r9.xyz, r6.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r9.xyz, r9.xyzx
  imad r0.z, r9.y, l(1024), r9.x
  imad r4.x, r9.z, l(0x00200000), r0.z
  mov_sat r8.xyz, r8.xyzx
  mad r9.xyz, r8.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r9.xyz, r9.xyzx
  imad r0.z, r9.y, l(1024), r9.x
  imad r4.y, r9.z, l(0x00200000), r0.z
  mov r8.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r6.xy, r6.xyxx
  mad r4.xy, r6.xyxx, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r8.z, r4.y, l(0x00010000), r4.x
  mov_sat r8.xy, r8.xyxx
  mad r4.xy, r8.xyxx, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r8.x, r4.y, l(0x00010000), r4.x
  break 
  case l(31)
  f32tof16 r4.x, r6.x
  f32tof16 r4.y, r8.x
  f32tof16 r5.x, r6.y
  f32tof16 r5.y, r8.y
  imad r8.xz, r5.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r8.z, r6.x
  break 
endswitch 
if_nz r3.x
  ishl r4.xy, r8.zxzz, l(8, 8, 0, 0)
  and r4.xy, r4.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r5.xy, r8.zxzz, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r8.xz, r4.yyxy, r5.yyxy
endif 
if_nz r3.z
  ushr r4.xy, r8.zxzz, l(16, 16, 0, 0)
  bfi r8.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r8.xxzx, r4.yyxy
endif 
store_uav_typed U0[0].xyzw, r7.yyyy, r8.zxzz
ld r6.yw, r3.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.yw, r6.yyyw, l(0, 16, 0, 16)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.wwwy
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(726)
  ld r8.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r8.yyyw, l(0, 16, 0, 16)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.wwwy
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r8.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.z, r0.w, l(0.250000)
    iadd r3.yw, r0.yyyy, l(0, 15, 0, 735)
    ld r8.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r4.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r6.ywxz, r8.ywxz
    ld r9.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r9.yyyw, l(0, 16, 0, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.wwwy
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r6.xyzw, r0.zzzz, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
ld r8.yw, r5.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
  ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
  itof r9.xyzw, r9.xyzw
  mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r0.yz, r8.yywy, l(0, 16, 16, 0)
  f16tof32 r8.xy, r8.wyww
  f16tof32 r8.zw, r0.zzzy
  break 
  default 
  mov r8.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.y, r0.w, l(0.500000)
  iadd r0.z, r1.w, l(727)
  ld r9.yw, r0.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
    ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
    itof r10.xyzw, r10.xyzw
    mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r9.yyyw, l(0, 16, 0, 16)
    f16tof32 r9.xy, r9.wyww
    f16tof32 r9.zw, r3.wwwy
    break 
    default 
    mov r9.xz, l(0,0,0,0)
    break 
  endswitch 
  add r8.xyzw, r8.xyzw, r9.xyzw
  uge r0.z, r1.y, l(6)
  if_nz r0.z
    mul r0.y, r0.w, l(0.250000)
    iadd r3.yw, r1.wwww, l(0, 16, 0, 736)
    ld r9.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r4.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r9.xyzw, r8.ywxz, r9.ywxz
    ld r10.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r10.xz, r10.yywy, l(16, 0, 16, 0)
      ishr r11.xyzw, r10.xyzw, l(16, 16, 16, 16)
      itof r11.xyzw, r11.xyzw
      mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r10.xyzw, r11.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r10.yyyw, l(0, 16, 0, 16)
      f16tof32 r10.xy, r10.wyww
      f16tof32 r10.zw, r3.wwwy
      break 
      default 
      mov r10.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r9.zxwy, r10.xyzw
  endif 
else 
  mov r0.y, r0.w
endif 
mul r8.xyzw, r0.yyyy, r8.ywxz
if_nz r1.z
  mov r8.xz, r8.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r6.xyzw, r6.xyzw
  mad r9.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.y, r9.y, l(256), r9.x
  imad r0.y, r9.z, l(0x00010000), r0.y
  imad r4.x, r9.w, l(0x01000000), r0.y
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.y, r9.y, l(256), r9.x
  imad r0.y, r9.z, l(0x00010000), r0.y
  imad r4.y, r9.w, l(0x01000000), r0.y
  mov r8.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r6.xyzw, r6.xyzw
  mad r9.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.y, r9.y, l(1024), r9.x
  imad r0.y, r9.z, l(0x00100000), r0.y
  imad r4.x, r9.w, l(0x40000000), r0.y
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r0.y, r9.y, l(1024), r9.x
  imad r0.y, r9.z, l(0x00100000), r0.y
  imad r4.y, r9.w, l(0x40000000), r0.y
  mov r8.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r6.xyz, r6.xyzx
  mad r5.xyz, r6.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(2048), r5.x
  imad r4.x, r5.z, l(0x00400000), r0.y
  mov_sat r8.xyz, r8.xyzx
  mad r5.xyz, r8.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(2048), r5.x
  imad r4.y, r5.z, l(0x00400000), r0.y
  mov r8.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r6.xyz, r6.xyzx
  mad r5.xyz, r6.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(1024), r5.x
  imad r4.x, r5.z, l(0x00200000), r0.y
  mov_sat r8.xyz, r8.xyzx
  mad r5.xyz, r8.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(1024), r5.x
  imad r4.y, r5.z, l(0x00200000), r0.y
  mov r8.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r6.xy, r6.xyxx
  mad r0.yz, r6.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r0.yz, r0.yyzy
  imad r8.z, r0.z, l(0x00010000), r0.y
  mov_sat r8.xy, r8.xyxx
  mad r0.yz, r8.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r0.yz, r0.yyzy
  imad r8.x, r0.z, l(0x00010000), r0.y
  break 
  case l(31)
  f32tof16 r4.x, r6.x
  f32tof16 r4.y, r8.x
  f32tof16 r5.x, r6.y
  f32tof16 r5.y, r8.y
  imad r8.xz, r5.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r8.z, r6.x
  break 
endswitch 
if_nz r3.x
  ishl r0.yz, r8.zzxz, l(0, 8, 8, 0)
  and r0.yz, r0.yyzy, l(0, 0xff00ff00, 0xff00ff00, 0)
  ushr r3.yw, r8.zzzx, l(0, 8, 0, 8)
  and r3.yw, r3.yyyw, l(0, 0x00ff00ff, 0, 0x00ff00ff)
  iadd r8.xz, r0.zzyz, r3.wwyw
endif 
if_nz r3.z
  ushr r0.yz, r8.zzxz, l(0, 16, 16, 0)
  bfi r8.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r8.xxzx, r0.zzyz
endif 
store_uav_typed U0[0].xyzw, r7.zzzz, r8.zxzz
ld r5.yw, r5.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r0.yz, r5.yywy, l(0, 16, 16, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r0.zzzy
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.y, r0.w, l(0.500000)
  iadd r0.z, r1.w, l(728)
  ld r6.yw, r0.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r6.yyyw, l(0, 16, 0, 16)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r3.wwwy
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r0.z, r1.y, l(6)
  if_nz r0.z
    mul r0.y, r0.w, l(0.250000)
    iadd r3.yw, r1.wwww, l(0, 17, 0, 737)
    ld r6.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r4.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r8.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r8.yyyw, l(0, 16, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwy
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r8.xyzw
  endif 
else 
  mov r0.y, r0.w
endif 
mul r5.xyzw, r0.yyyy, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
movc r0.y, r2.z, l(18), l(9)
iadd r0.y, r0.y, r1.w
imad r0.z, r2.y, l(3), r0.y
iadd r1.w, r2.x, r0.z
ld r6.yw, r1.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.yz, r6.yywy, l(0, 16, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r2.zzzy
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.y, r0.w, l(0.500000)
  iadd r2.z, r1.w, l(720)
  ld r8.yw, r2.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.zw, r8.yyyw, l(0, 0, 16, 16)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r2.wwwz
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r8.xyzw
  uge r2.z, r1.y, l(6)
  if_nz r2.z
    mul r2.y, r0.w, l(0.250000)
    iadd r2.zw, r1.wwww, l(0, 0, 9, 729)
    ld r8.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r8.yyyw, l(0, 16, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwy
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r6.ywxz, r8.ywxz
    ld r9.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.zw, r9.yyyw, l(0, 0, 16, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r2.wwwz
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.y, r0.w
endif 
mul r6.xyzw, r2.yyyy, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(256), r8.x
  imad r1.w, r8.z, l(0x00010000), r1.w
  imad r4.x, r8.w, l(0x01000000), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(256), r8.x
  imad r1.w, r8.z, l(0x00010000), r1.w
  imad r4.y, r8.w, l(0x01000000), r1.w
  mov r6.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(1024), r8.x
  imad r1.w, r8.z, l(0x00100000), r1.w
  imad r4.x, r8.w, l(0x40000000), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(1024), r8.x
  imad r1.w, r8.z, l(0x00100000), r1.w
  imad r4.y, r8.w, l(0x40000000), r1.w
  mov r6.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r2.yzw, r5.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r1.w, r2.z, l(2048), r2.y
  imad r4.x, r2.w, l(0x00400000), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r2.yzw, r6.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r1.w, r2.z, l(2048), r2.y
  imad r4.y, r2.w, l(0x00400000), r1.w
  mov r6.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r2.yzw, r5.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r1.w, r2.z, l(1024), r2.y
  imad r4.x, r2.w, l(0x00200000), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r2.yzw, r6.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r1.w, r2.z, l(1024), r2.y
  imad r4.y, r2.w, l(0x00200000), r1.w
  mov r6.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r2.yz, r5.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r2.yz, r2.yyzy
  imad r6.z, r2.z, l(0x00010000), r2.y
  mov_sat r6.xy, r6.xyxx
  mad r2.yz, r6.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r2.yz, r2.yyzy
  imad r6.x, r2.z, l(0x00010000), r2.y
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r6.x
  f32tof16 r7.x, r5.y
  f32tof16 r7.y, r6.y
  imad r6.xz, r7.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r6.z, r5.x
  break 
endswitch 
if_nz r3.x
  ishl r2.yz, r6.zzxz, l(0, 8, 8, 0)
  and r2.yz, r2.yyzy, l(0, 0xff00ff00, 0xff00ff00, 0)
  ushr r3.yw, r6.zzzx, l(0, 8, 0, 8)
  and r3.yw, r3.yyyw, l(0, 0x00ff00ff, 0, 0x00ff00ff)
  iadd r6.xz, r2.zzyz, r3.wwyw
endif 
if_nz r3.z
  ushr r2.yz, r6.zzxz, l(0, 16, 16, 0)
  bfi r6.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r6.xxzx, r2.zzyz
endif 
store_uav_typed U0[0].xyzw, r7.wwww, r6.zxzz
iadd r2.yz, r0.zzzz, l(0, 1, 2, 0)
ld r5.yw, r2.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.yw, r5.yyyw, l(0, 16, 0, 16)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r2.wwwy
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.y, r0.z, l(721)
  ld r6.yw, r2.yyyy, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.yw, r6.yyyw, l(0, 16, 0, 16)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r2.wwwy
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.y, r1.y, l(6)
  if_nz r2.y
    mul r1.w, r0.w, l(0.250000)
    iadd r2.yw, r0.zzzz, l(0, 10, 0, 730)
    ld r6.yw, r2.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r6.yyyw, l(0, 16, 0, 16)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r3.wwwy
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.yw, r7.yyyw, l(0, 16, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r2.wwwy
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r5.xyzw, r1.wwww, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
ld r6.yw, r2.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.yz, r6.yywy, l(0, 16, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r2.zzzy
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.y, r0.z, l(722)
  ld r7.yw, r2.yyyy, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.yz, r7.yywy, l(0, 16, 16, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r2.zzzy
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.y, r1.y, l(6)
  if_nz r2.y
    mul r1.w, r0.w, l(0.250000)
    iadd r2.yz, r0.zzzz, l(0, 11, 731, 0)
    ld r7.yw, r2.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.yw, r7.yyyw, l(0, 16, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r2.wwwy
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.yz, r8.yywy, l(0, 16, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r2.zzzy
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r6.xyzw, r1.wwww, r6.ywxz
if_nz r1.z
  mov r6.xz, r6.zzxz
endif 
iadd r7.xyzw, r0.xxxx, l(5, 6, 7, 8)
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.x, r8.w, l(0x01000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.y, r8.w, l(0x01000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.x, r8.w, l(0x40000000), r0.z
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.y, r8.w, l(0x40000000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r2.yzw, r5.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r0.z, r2.z, l(2048), r2.y
  imad r4.x, r2.w, l(0x00400000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r2.yzw, r6.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r0.z, r2.z, l(2048), r2.y
  imad r4.y, r2.w, l(0x00400000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r2.yzw, r5.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r0.z, r2.z, l(1024), r2.y
  imad r4.x, r2.w, l(0x00200000), r0.z
  mov_sat r6.xyz, r6.xyzx
  mad r2.yzw, r6.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r2.yzw, r2.yyzw
  imad r0.z, r2.z, l(1024), r2.y
  imad r4.y, r2.w, l(0x00200000), r0.z
  mov r6.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r2.yz, r5.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r2.yz, r2.yyzy
  imad r6.z, r2.z, l(0x00010000), r2.y
  mov_sat r6.xy, r6.xyxx
  mad r2.yz, r6.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r2.yz, r2.yyzy
  imad r6.x, r2.z, l(0x00010000), r2.y
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r6.x
  f32tof16 r8.x, r5.y
  f32tof16 r8.y, r6.y
  imad r6.xz, r8.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r6.z, r5.x
  break 
endswitch 
if_nz r3.x
  ishl r2.yz, r6.zzxz, l(0, 8, 8, 0)
  and r2.yz, r2.yyzy, l(0, 0xff00ff00, 0xff00ff00, 0)
  ushr r3.yw, r6.zzzx, l(0, 8, 0, 8)
  and r3.yw, r3.yyyw, l(0, 0x00ff00ff, 0, 0x00ff00ff)
  iadd r6.xz, r2.zzyz, r3.wwyw
endif 
if_nz r3.z
  ushr r2.yz, r6.zzxz, l(0, 16, 16, 0)
  bfi r6.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r6.xxzx, r2.zzyz
endif 
store_uav_typed U0[0].xyzw, r7.xxxx, r6.zxzz
iadd r0.z, r2.x, r0.y
iadd r2.xy, r0.zzzz, l(3, 6, 0, 0)
ld r5.yw, r2.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r5.yywy, l(16, 0, 16, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r2.zzzx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.x, r0.z, l(723)
  ld r6.yw, r2.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.xz, r6.yywy, l(16, 0, 16, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r2.zzzx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.x, r1.y, l(6)
  if_nz r2.x
    mul r1.w, r0.w, l(0.250000)
    iadd r2.xz, r0.zzzz, l(12, 0, 732, 0)
    ld r6.yw, r2.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xw, r6.yyyw, l(16, 0, 0, 16)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r2.wwwx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r8.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r2.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r8.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r5.xyzw, r1.wwww, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
iadd r6.xyzw, r0.yyyy, l(4, 5, 7, 8)
ld r8.yw, r6.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
  ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
  itof r9.xyzw, r9.xyzw
  mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r8.yywy, l(16, 0, 16, 0)
  f16tof32 r8.xy, r8.wyww
  f16tof32 r8.zw, r2.zzzx
  break 
  default 
  mov r8.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.x, r0.y, l(724)
  ld r9.yw, r2.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
    ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
    itof r10.xyzw, r10.xyzw
    mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.xz, r9.yywy, l(16, 0, 16, 0)
    f16tof32 r9.xy, r9.wyww
    f16tof32 r9.zw, r2.zzzx
    break 
    default 
    mov r9.xz, l(0,0,0,0)
    break 
  endswitch 
  add r8.xyzw, r8.xyzw, r9.xyzw
  uge r2.x, r1.y, l(6)
  if_nz r2.x
    mul r1.w, r0.w, l(0.250000)
    iadd r2.xz, r0.yyyy, l(13, 0, 733, 0)
    ld r9.yw, r2.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xw, r9.yyyw, l(16, 0, 0, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r2.wwwx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r9.xyzw, r8.ywxz, r9.ywxz
    ld r10.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r10.xz, r10.yywy, l(16, 0, 16, 0)
      ishr r11.xyzw, r10.xyzw, l(16, 16, 16, 16)
      itof r11.xyzw, r11.xyzw
      mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r10.xyzw, r11.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xz, r10.yywy, l(16, 0, 16, 0)
      f16tof32 r10.xy, r10.wyww
      f16tof32 r10.zw, r2.zzzx
      break 
      default 
      mov r10.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r9.zxwy, r10.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r8.xyzw, r1.wwww, r8.ywxz
if_nz r1.z
  mov r8.xz, r8.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r9.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r1.w, r9.y, l(256), r9.x
  imad r1.w, r9.z, l(0x00010000), r1.w
  imad r4.x, r9.w, l(0x01000000), r1.w
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r1.w, r9.y, l(256), r9.x
  imad r1.w, r9.z, l(0x00010000), r1.w
  imad r4.y, r9.w, l(0x01000000), r1.w
  mov r8.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r9.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r1.w, r9.y, l(1024), r9.x
  imad r1.w, r9.z, l(0x00100000), r1.w
  imad r4.x, r9.w, l(0x40000000), r1.w
  mov_sat r8.xyzw, r8.xyzw
  mad r9.xyzw, r8.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r9.xyzw, r9.xyzw
  imad r1.w, r9.y, l(1024), r9.x
  imad r1.w, r9.z, l(0x00100000), r1.w
  imad r4.y, r9.w, l(0x40000000), r1.w
  mov r8.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r2.xzw, r5.xxyz, l(2047.000000, 0.000000, 2047.000000, 1023.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(2048), r2.x
  imad r4.x, r2.w, l(0x00400000), r1.w
  mov_sat r8.xyz, r8.xyzx
  mad r2.xzw, r8.xxyz, l(2047.000000, 0.000000, 2047.000000, 1023.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(2048), r2.x
  imad r4.y, r2.w, l(0x00400000), r1.w
  mov r8.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r2.xzw, r5.xxyz, l(1023.000000, 0.000000, 2047.000000, 2047.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(1024), r2.x
  imad r4.x, r2.w, l(0x00200000), r1.w
  mov_sat r8.xyz, r8.xyzx
  mad r2.xzw, r8.xxyz, l(1023.000000, 0.000000, 2047.000000, 2047.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(1024), r2.x
  imad r4.y, r2.w, l(0x00200000), r1.w
  mov r8.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r2.xz, r5.xxyx, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r2.xz, r2.xxzx
  imad r8.z, r2.z, l(0x00010000), r2.x
  mov_sat r8.xy, r8.xyxx
  mad r2.xz, r8.xxyx, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r2.xz, r2.xxzx
  imad r8.x, r2.z, l(0x00010000), r2.x
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r8.x
  f32tof16 r9.x, r5.y
  f32tof16 r9.y, r8.y
  imad r8.xz, r9.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r8.z, r5.x
  break 
endswitch 
if_nz r3.x
  ishl r2.xz, r8.zzxz, l(8, 0, 8, 0)
  and r2.xz, r2.xxzx, l(0xff00ff00, 0, 0xff00ff00, 0)
  ushr r3.yw, r8.zzzx, l(0, 8, 0, 8)
  and r3.yw, r3.yyyw, l(0, 0x00ff00ff, 0, 0x00ff00ff)
  iadd r8.xz, r2.zzxz, r3.wwyw
endif 
if_nz r3.z
  ushr r2.xz, r8.zzxz, l(16, 0, 16, 0)
  bfi r8.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r8.xxzx, r2.zzxz
endif 
store_uav_typed U0[0].xyzw, r7.yyyy, r8.zxzz
ld r5.yw, r6.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r5.yywy, l(16, 0, 16, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r2.zzzx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.x, r0.y, l(725)
  ld r8.yw, r2.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.xz, r8.yywy, l(16, 0, 16, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r2.zzzx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r8.xyzw
  uge r2.x, r1.y, l(6)
  if_nz r2.x
    mul r1.w, r0.w, l(0.250000)
    iadd r2.xz, r0.yyyy, l(14, 0, 734, 0)
    ld r8.yw, r2.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xw, r8.yyyw, l(16, 0, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r2.wwwx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r5.ywxz, r8.ywxz
    ld r9.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xz, r9.yywy, l(16, 0, 16, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r2.zzzx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r5.xyzw, r1.wwww, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
ld r2.yw, r2.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r2.xz, r2.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r2.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r2.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.yw, r2.yyyw, l(0, 16, 0, 16)
  f16tof32 r2.xy, r2.wyww
  f16tof32 r2.zw, r3.wwwy
  break 
  default 
  mov r2.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r3.y, r0.z, l(726)
  ld r8.yw, r3.yyyy, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r8.yyyw, l(0, 16, 0, 16)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.wwwy
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r2.xyzw, r2.xyzw, r8.xyzw
  uge r3.y, r1.y, l(6)
  if_nz r3.y
    mul r1.w, r0.w, l(0.250000)
    iadd r3.yw, r0.zzzz, l(0, 15, 0, 735)
    ld r8.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r4.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r2.ywxz, r8.ywxz
    ld r9.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r9.yyyw, l(0, 16, 0, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.wwwy
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r2.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r2.xyzw, r1.wwww, r2.ywxz
if_nz r1.z
  mov r2.xz, r2.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.x, r8.w, l(0x01000000), r0.z
  mov_sat r2.xyzw, r2.xyzw
  mad r8.xyzw, r2.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(256), r8.x
  imad r0.z, r8.z, l(0x00010000), r0.z
  imad r4.y, r8.w, l(0x01000000), r0.z
  mov r2.xz, r4.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.x, r8.w, l(0x40000000), r0.z
  mov_sat r2.xyzw, r2.xyzw
  mad r8.xyzw, r2.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r0.z, r8.y, l(1024), r8.x
  imad r0.z, r8.z, l(0x00100000), r0.z
  imad r4.y, r8.w, l(0x40000000), r0.z
  mov r2.xz, r4.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(2048), r8.x
  imad r4.x, r8.z, l(0x00400000), r0.z
  mov_sat r2.xyz, r2.xyzx
  mad r8.xyz, r2.xyzx, l(2047.000000, 2047.000000, 1023.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(2048), r8.x
  imad r4.y, r8.z, l(0x00400000), r0.z
  mov r2.xz, r4.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(1024), r8.x
  imad r4.x, r8.z, l(0x00200000), r0.z
  mov_sat r2.xyz, r2.xyzx
  mad r8.xyz, r2.xyzx, l(1023.000000, 2047.000000, 2047.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r0.z, r8.y, l(1024), r8.x
  imad r4.y, r8.z, l(0x00200000), r0.z
  mov r2.xz, r4.yyxy
  break 
  case l(25)
  mov_sat r5.xy, r5.xyxx
  mad r3.yw, r5.xxxy, l(0.000000, 65535.000000, 0.000000, 65535.000000), l(0.000000, 0.500000, 0.000000, 0.500000)
  ftou r3.yw, r3.yyyw
  imad r2.z, r3.w, l(0x00010000), r3.y
  mov_sat r2.xy, r2.xyxx
  mad r3.yw, r2.xxxy, l(0.000000, 65535.000000, 0.000000, 65535.000000), l(0.000000, 0.500000, 0.000000, 0.500000)
  ftou r3.yw, r3.yyyw
  imad r2.x, r3.w, l(0x00010000), r3.y
  break 
  case l(31)
  f32tof16 r4.x, r5.x
  f32tof16 r4.y, r2.x
  f32tof16 r6.x, r5.y
  f32tof16 r6.y, r2.y
  imad r2.xz, r6.yyxy, l(0x00010000, 0, 0x00010000, 0), r4.yyxy
  break 
  default 
  mov r2.z, r5.x
  break 
endswitch 
if_nz r3.x
  ishl r2.yw, r2.zzzx, l(0, 8, 0, 8)
  and r2.yw, r2.yyyw, l(0, 0xff00ff00, 0, 0xff00ff00)
  ushr r3.yw, r2.zzzx, l(0, 8, 0, 8)
  and r3.yw, r3.yyyw, l(0, 0x00ff00ff, 0, 0x00ff00ff)
  iadd r2.xz, r2.wwyw, r3.wwyw
endif 
if_nz r3.z
  ushr r2.yw, r2.zzzx, l(0, 16, 0, 16)
  bfi r2.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r2.xxzx, r2.wwyw
endif 
store_uav_typed U0[0].xyzw, r7.zzzz, r2.zxzz
ld r2.yw, r6.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r2.xz, r2.yywy, l(16, 0, 16, 0)
  ishr r5.xyzw, r2.xyzw, l(16, 16, 16, 16)
  itof r5.xyzw, r5.xyzw
  mul r5.xyzw, r5.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r2.xyzw, r5.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.yw, r2.yyyw, l(0, 16, 0, 16)
  f16tof32 r2.xy, r2.wyww
  f16tof32 r2.zw, r3.wwwy
  break 
  default 
  mov r2.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r1.w, r0.y, l(727)
  ld r5.yw, r1.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r5.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.yw, r5.yyyw, l(0, 16, 0, 16)
    f16tof32 r5.xy, r5.wyww
    f16tof32 r5.zw, r3.wwwy
    break 
    default 
    mov r5.xz, l(0,0,0,0)
    break 
  endswitch 
  add r2.xyzw, r2.xyzw, r5.xyzw
  uge r1.w, r1.y, l(6)
  if_nz r1.w
    mul r0.z, r0.w, l(0.250000)
    iadd r3.yw, r0.yyyy, l(0, 16, 0, 736)
    ld r5.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r5.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r5.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r5.ywyy, l(16, 16, 0, 0)
      f16tof32 r5.xy, r5.wyww
      f16tof32 r5.zw, r4.yyyx
      break 
      default 
      mov r5.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r2.ywxz, r5.ywxz
    ld r8.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.yw, r8.yyyw, l(0, 16, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwy
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r2.xyzw, r5.zxwy, r8.xyzw
  endif 
else 
  mov r0.z, r0.w
endif 
mul r2.xyzw, r0.zzzz, r2.ywxz
if_nz r1.z
  mov r2.xz, r2.zzxz
endif 
ld r5.yw, r6.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.yw, r5.yyyw, l(0, 16, 0, 16)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r3.wwwy
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.z, r0.w, l(0.500000)
  iadd r1.x, r0.y, l(728)
  ld r6.yw, r1.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r1.xw, r6.yyyw, l(16, 0, 0, 16)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r1.wwwx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r1.x, r1.y, l(6)
  if_nz r1.x
    mul r0.w, r0.w, l(0.250000)
    iadd r1.xy, r0.yyyy, l(17, 737, 0, 0)
    ld r6.yw, r1.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r1.xw, r6.yyyw, l(16, 0, 0, 16)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r1.wwwx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r8.yw, r1.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r1.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r1.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r8.xyzw
  else 
    mov r0.w, r0.z
  endif 
endif 
mul r5.xyzw, r0.wwww, r5.ywxz
if_nz r1.z
  mov r5.xz, r5.zzxz
endif 
switch r4.z
  case l(6)
  case l(14)
  case l(50)
  mov_sat r2.xyzw, r2.xyzw
  mad r1.xyzw, r2.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r1.xyzw, r1.xyzw
  imad r0.y, r1.y, l(256), r1.x
  imad r0.y, r1.z, l(0x00010000), r0.y
  imad r1.x, r1.w, l(0x01000000), r0.y
  mov_sat r5.xyzw, r5.xyzw
  mad r4.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r4.xyzw, r4.xyzw
  imad r0.y, r4.y, l(256), r4.x
  imad r0.y, r4.z, l(0x00010000), r0.y
  imad r1.y, r4.w, l(0x01000000), r0.y
  mov r5.xz, r1.yyxy
  break 
  case l(7)
  case l(54)
  mov_sat r2.xyzw, r2.xyzw
  mad r1.xyzw, r2.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r1.xyzw, r1.xyzw
  imad r0.y, r1.y, l(1024), r1.x
  imad r0.y, r1.z, l(0x00100000), r0.y
  imad r1.x, r1.w, l(0x40000000), r0.y
  mov_sat r5.xyzw, r5.xyzw
  mad r4.xyzw, r5.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r4.xyzw, r4.xyzw
  imad r0.y, r4.y, l(1024), r4.x
  imad r0.y, r4.z, l(0x00100000), r0.y
  imad r1.y, r4.w, l(0x40000000), r0.y
  mov r5.xz, r1.yyxy
  break 
  case l(16)
  case l(55)
  mov_sat r2.xyz, r2.xyzx
  mad r0.yzw, r2.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(2048), r0.y
  imad r1.x, r0.w, l(0x00400000), r0.y
  mov_sat r5.xyz, r5.xyzx
  mad r0.yzw, r5.xxyz, l(0.000000, 2047.000000, 2047.000000, 1023.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(2048), r0.y
  imad r1.y, r0.w, l(0x00400000), r0.y
  mov r5.xz, r1.yyxy
  break 
  case l(17)
  case l(56)
  mov_sat r2.xyz, r2.xyzx
  mad r0.yzw, r2.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(1024), r0.y
  imad r1.x, r0.w, l(0x00200000), r0.y
  mov_sat r5.xyz, r5.xyzx
  mad r0.yzw, r5.xxyz, l(0.000000, 1023.000000, 2047.000000, 2047.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(1024), r0.y
  imad r1.y, r0.w, l(0x00200000), r0.y
  mov r5.xz, r1.yyxy
  break 
  case l(25)
  mov_sat r2.xy, r2.xyxx
  mad r0.yz, r2.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r0.yz, r0.yyzy
  imad r5.z, r0.z, l(0x00010000), r0.y
  mov_sat r5.xy, r5.xyxx
  mad r0.yz, r5.xxyx, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r0.yz, r0.yyzy
  imad r5.x, r0.z, l(0x00010000), r0.y
  break 
  case l(31)
  f32tof16 r1.x, r2.x
  f32tof16 r1.y, r5.x
  f32tof16 r4.x, r2.y
  f32tof16 r4.y, r5.y
  imad r5.xz, r4.yyxy, l(0x00010000, 0, 0x00010000, 0), r1.yyxy
  break 
  default 
  mov r5.z, r2.x
  break 
endswitch 
if_nz r3.x
  ishl r0.yz, r5.zzxz, l(0, 8, 8, 0)
  and r0.yz, r0.yyzy, l(0, 0xff00ff00, 0xff00ff00, 0)
  ushr r1.xy, r5.zxzz, l(8, 8, 0, 0)
  and r1.xy, r1.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r5.xz, r0.zzyz, r1.yyxy
endif 
if_nz r3.z
  ushr r0.yz, r5.zzxz, l(0, 16, 16, 0)
  bfi r5.xz, l(16, 0, 16, 0), l(16, 0, 16, 0), r5.xxzx, r0.zzyz
endif 
store_uav_typed U0[0].xyzw, r7.wwww, r5.zxzz
ret 
// Approximately 2604 instruction slots used
